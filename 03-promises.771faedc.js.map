{"mappings":"qhBA6CA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CGQ,SAASC,cAAc,QAE/BC,iBAAiB,UAEzB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAQZ,MAAAa,EAAKC,OAAEA,EAAMC,KAAEA,GAASJ,EAAEK,OAAOC,SAEzC,IAAIC,EAAaC,OAAON,EAAMO,OAE9B,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAOM,MAAOC,GAAK,EAEtCvB,EAAcuB,EAAGH,GACdI,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAW,CACrE0B,QAAO,GACTC,QAAS,IACTC,qBAAsB,MACtB,IAEHC,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOM,QAAQ,sBAAoB/B,QAAeC,MAAW,CACpE0B,QAAS,GACTC,QAAS,IACTC,qBAAsB,MACtB,IAENV,GAAcC,OAAOJ,EAAKK,OAE5BT,EAAEK,OAAOe,O","sources":["src/js/03-promises.js"],"sourcesContent":["// Задание 3 - генератор промисов\n// Выполняй это задание в файлах 03 - promises.html и 03 - promises.js.Посмотри демо видео работы генератора промисов.\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах,\n//  шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n// < form class=\"form\" >\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </ >\n//   Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, \n// сколько ввели в поле amount.При каждом вызове передай ей номер создаваемого промиса(position) и задержку \n// учитывая введенную пользователем первую задержку(delay) и шаг(step).\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполняется или отклоняется через delay времени.\n// Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.\n// Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n//   createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// Библиотека уведомлений\n// ВНИМАНИЕ\n// Этот функционал не обязателен при сдаче задания, но будет хорошей дополнительной практикой.\n// Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n\nimport Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('form');\n\nformRef.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  const { delay, amount, step } = e.target.elements;\n\n  let delayValue = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i += 1) {\n\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, {\n          opacity: 0.8,\n          timeout: 250,\n          cssAnimationDuration: 1500,\n        });\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, {\n          opacity: 0.8,\n          timeout: 250,\n          cssAnimationDuration: 1500,\n        });\n      });\n    delayValue += Number(step.value);\n  }\n  e.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","amount","step","target","elements","delayValue","Number","value","i","then","$parcel$interopDefault","Notify","success","opacity","timeout","cssAnimationDuration","catch","failure","reset"],"version":3,"file":"03-promises.771faedc.js.map"}